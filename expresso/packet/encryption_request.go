package packet

import (
	"crypto/rsa"
	"crypto/x509"
	"github.com/justtaldevelops/expresso/expresso/protocol"
)

// EncryptionRequest is sent by the server to request encryption on future packets. If the client
// accepts, it will send back an EncryptionResponse packet.
type EncryptionRequest struct {
	// ServerID is always empty post 1.7.
	ServerID string
	// PublicKey is the public key of the server.
	PublicKey rsa.PublicKey
	// VerifyToken is always 4 random bytes generated by the server.
	VerifyToken []byte
}

// ID ...
func (*EncryptionRequest) ID() int32 {
	return 0x01
}

// Marshal ...
func (pk *EncryptionRequest) Marshal(w *protocol.Writer) {
	publicKey, err := x509.MarshalPKIXPublicKey(&pk.PublicKey)
	if err != nil {
		panic(err)
	}

	w.String(&pk.ServerID)
	w.ByteSlice(&publicKey)
	w.ByteSlice(&pk.VerifyToken)
}

// Unmarshal ...
func (pk *EncryptionRequest) Unmarshal(r *protocol.Reader) {
	var publicKey []byte

	r.String(&pk.ServerID)
	r.ByteSlice(&publicKey)
	r.ByteSlice(&pk.VerifyToken)

	key, err := x509.ParsePKIXPublicKey(publicKey)
	if err != nil {
		panic(err)
	}
	pk.PublicKey = *key.(*rsa.PublicKey)
}
